<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WPFExpress.Controls"
                    xmlns:cvt="clr-namespace:WPFExpress.Convert">


    <Style x:Key="ExpHitTextBoxKey" BasedOn="{x:Null}" TargetType="{x:Type local:HitTextBox}">
        <Style.Resources>
            <cvt:HitTextBoxConvert x:Key="HitTextBoxConvert"/>
        </Style.Resources>
        <!--用户控件需要设置默认尺寸-->
        <Setter Property="Width" Value="120"></Setter>
        <Setter Property="Height" Value="23"></Setter>

        <Setter Property="Foreground" Value="{DynamicResource Text.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Text.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Window.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HitTextBox}">
                    <Border   BorderThickness="{TemplateBinding BorderThickness}" x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"  SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <!--顶端对齐-->
                            <TextBlock Text="{TemplateBinding HitText}" TextWrapping="Wrap"  Foreground="{DynamicResource Static.HitTextColor}" Margin="2,2,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  FontSize="{TemplateBinding FontSize}"  Visibility="{Binding Text, Converter={StaticResource HitTextBoxConvert}, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ScrollViewer x:Name="PART_ContentHost"   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <Border Grid.Column="1" x:Name="BG">
                                <TextBlock x:Name="ICON"  Style="{DynamicResource FontAwesome}" Foreground="{DynamicResource Text.Foreground}" FontSize="16" Margin="2" TextWrapping="Wrap" Text="{TemplateBinding Icon}" VerticalAlignment="Center" HorizontalAlignment="Center"  />

                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="BG">
                            <Setter Property="Background" TargetName="BG" Value="{DynamicResource MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="BG" Value="{DynamicResource Window.Border}"/>
                            <Setter Property="Foreground" TargetName="ICON" Value="{DynamicResource Window.Foreground}"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter Property="Background" TargetName="Chrome" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>-->
                            <Setter Property="Foreground" Value="{DynamicResource Disabled.Background}"/>
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <Style TargetType="{x:Type local:HitTextBox}" BasedOn="{StaticResource ExpHitTextBoxKey}"/>


</ResourceDictionary>